#include <Arduino.h>
#include <WiFi.h>
#include <HTTPClient.h>
const char* ssid = "Redmi Note 10S";
const char* password = "Red@4321";
const char* serverIP = "http://192.168.6.63:5000/sensor-data";
#define TRIG_1 4
#define ECHO_1 18
#define TRIG_2 5
#define ECHO_2 19
#define TRIG_3 14
#define ECHO_3 21
#define PIR_SENSOR 22
#define MIC_ANALOG 34
#define MIC_DIGITAL 35
#define GREEN_LED 25
#define WHITE_LED 26
#define RED_LED 27
void setup() {
Serial.begin(115200);
WiFi.begin(ssid, password);
Serial.print("Connecting to WiFi");
while (WiFi.status() != WL_CONNECTED) {
Serial.print(".");
delay(500);
}
Serial.println("\nConnected to WiFi");
pinMode(TRIG_1, OUTPUT); pinMode(ECHO_1, INPUT);
pinMode(TRIG_2, OUTPUT); pinMode(ECHO_2, INPUT);
pinMode(TRIG_3, OUTPUT); pinMode(ECHO_3, INPUT);
pinMode(PIR_SENSOR, INPUT);
pinMode(MIC_DIGITAL, INPUT);
pinMode(GREEN_LED, OUTPUT);
pinMode(WHITE_LED, OUTPUT);
pinMode(RED_LED, OUTPUT);
digitalWrite(GREEN_LED, HIGH);
digitalWrite(WHITE_LED, LOW);
ong measureDistance(int trigPin, int echoPin) {
digitalWrite(trigPin, LOW);
delayMicroseconds(2);
digitalWrite(trigPin, HIGH);
delayMicroseconds(10);
digitalWrite(trigPin, LOW);
long duration = pulseIn(echoPin, HIGH, 30000); // 30ms timeout
if (duration == 0) return 400; // No response, assume max distance
return duration * 0.0343 / 2; // Convert to cm}
void updateLEDStatus(bool motion, int micAnalog, long dist1, long dist2, long dist3) {
String threatLevel = "No Threat";
bool highThreat = false, mediumThreat = false;
if (micAnalog > 500) {
threatLevel = "Heavy Vehicle or Explosion";
highThreat = true;
} else if (micAnalog > 300) {
threatLevel = "Light Vehicle or Group Movement";
mediumThreat = true;}
else if (micAnalog > 100) {
threatLevel = "Single Person Movement"; }
if (motion || dist1 < 100 || dist2 < 100 || dist3 < 100) {
highThreat = true;
threatLevel = "Immediate Threat!";}
else if (dist1 < 200 || dist2 < 200 || dist3 < 200) {
mediumThreat = true;
threatLevel = "Potential Threat!";}
if (highThreat) {
digitalWrite(RED_LED, HIGH);
digitalWrite(GREEN_LED, LOW);
digitalWrite(WHITE_LED, LOW);
} else if (mediumThreat) {
digitalWrite(WHITE_LED, HIGH);
digitalWrite(GREEN_LED, LOW);
digitalWrite(RED_LED, LOW);
} else {
digitalWrite(GREEN_LED, HIGH);
digitalWrite(WHITE_LED, LOW);
digitalWrite(RED_LED, LOW); }
Serial.println("Threat Level: " + threatLevel);}
void sendToRaspberryPi(long dist1, long dist2, long dist3, bool motion, int micAnalog, bool micDigital) {
if (WiFi.status() != WL_CONNECTED) {
Serial.println("WiFi Disconnected! Attempting reconnect...");
WiFi.disconnect();
WiFi.reconnect();
delay(500);
return;}
HTTPClient http;
http.begin(serverIP);
http.addHeader("Content-Type", "application/json");
// Create JSON payload
String jsonPayload = "{";
jsonPayload += "\"distance1\":" + String(dist1) + ",";
jsonPayload += "\"distance2\":" + String(dist2) + ",";
jsonPayload += "\"distance3\":" + String(dist3) + ",";
jsonPayload += "\"motion\":" + String(motion) + ",";
jsonPayload += "\"micAnalog\":" + String(micAnalog) + ",";
jsonPayload += "\"micDigital\":" + String(micDigital);
jsonPayload += "}";
Serial.println("Sending JSON: " + jsonPayload);
// Send HTTP POST request
int httpResponseCode = http.POST(jsonPayload);
if (httpResponseCode > 0) {
String response = http.getString();
Serial.print("Server Response: ");
Serial.println(response);
} else {
Serial.print("Error sending data: ");
Serial.println(httpResponseCode) }
http.end();}
void loop() {
long dist1 = measureDistance(TRIG_1, ECHO_1);
long dist2 = measureDistance(TRIG_2, ECHO_2);
long dist3 = measureDistance(TRIG_3, ECHO_3);
bool motionDetected = digitalRead(PIR_SENSOR);
int micAnalog = analogRead(MIC_ANALOG);
bool micDigital = digitalRead(MIC_DIGITAL);
// Update LED based on threat level
updateLEDStatus(motionDetected, micAnalog, dist1, dist2, dist3);
// Print sensor data to Serial Monitor
Serial.println("===== SENSOR DATA =====");
Serial.printf("Ultrasonic1: %ld cm\n", dist1);
Serial.printf("Ultrasonic2: %ld cm\n", dist2);
Serial.printf("Ultrasonic3: %ld cm\n", dist3);
Serial.printf("PIR Motion: %d\n", motionDetected);
Serial.printf("Mic Analog: %d\n", micAnalog);
Serial.printf("Mic Digital: %d\n", micDigital);
Serial.println("=======================");
// Send data to Raspberry Pi
sendToRaspberryPi(dist1, dist2, dist3, motionDetected, micAnalog, micDigital);
delay(1000);
